<style>
.precio {

    color: #dc3545; /* Color del texto */
    padding: 0.25rem 0.5rem; /* Espaciado interno */
    border-radius: 50%; /* Borde redondeado */
    text-align: center; /* Alineación del texto */
    cursor: pointer; /* Cursor de apuntador */
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out; /* Transiciones suaves */
    display: inline-block; /* Mostrar como bloque en línea */
    margin: 0; /* Eliminar márgenes por defecto */

}


/* Estilos para diferentes rangos de puntuación */
.precio.verde {
    background-color: green;
    color: white;
}

.precio.amarillo {
    background-color: yellow;
    color: black;
}

.precio.rojo {
    background-color: red;
    color: white;
}

.precio.verde:hover {
    background-color: #6abf69;
    color: black;
}

.precio.rojo:hover {
    background-color: #ff6b6b;
    color: black;
}

.precio.amarillo:hover {
    background-color: #ffd166;
    color: black;
}



.titulo{
    color: 	#ebf2f6;
    text-align: center;
}


img{
    float: left;
    margin-left: 200px; 
    margin-top: 30px;
    border-radius: 100%;
    -webkit-border-radius: 70%;
    -moz-border-radius: 70%;
    -ms-border-radius: 70%;
    -o-border-radius: 70%;
    height: 200px;
    object-fit: cover;
    /*Ajustalaimagenparallenarelespaciosindistorsión*/
}



.h1{
    color: 	#ebf2f6;
}
h1{
    color: rgb(70, 70, 238);
}


.tipoinicio{
    color: #2a6e9e ;
}
.nombreinicio{
    color: rgb(70, 70, 238) ;
}
.fabricanteinicio{
    color: rgb(70, 70, 238) ;
}
.descripcioninicio{
    color: #ebf2f6 ;
}
.verdetalles{
    color: #144c7a ;
    text-decoration: underline !important;
}
a{
    text-decoration: none;
    color: #ebf2f6;
}
.crearButton{
    background-color: black;

}

.editarButton{
    background-color: black;
    color: #ebf2f6;

}

.editarButton:hover{
background-color: blue
}
.eliminarButton{
    background-color: black;
    color: #ebf2f6;

}
.eliminarButton:hover{
    background-color: red !important;
}

.contenedorComponentes{
      display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes slideInFromLeft {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(0);
    }
}


.animacion-componente.componente-visible {
    animation: slideInFromLeft 0.5s ease-out;
}

    #aplicarFiltro:hover{
        cursor: pointer;
    }
    #restablecerFiltro:hover{
        cursor: pointer;
    }
    #precioFiltro:hover{
        cursor: pointer;
    }
    #aplicarPrecioFiltro:hover{
        cursor: pointer;
    }
    #aplicarNombreFiltro:hover{
        cursor: pointer;
    }


</style>
<body>

<input type="text" id="tipoFiltro" placeholder="Escribe el tipo a buscar">
<button id="aplicarFiltro">Aplicar filtro</button>

<select id="precioFiltro">
    <option value="0-999999999">elige una opcion</option>
    <option value="0-100000">Menos de 100000</option>
    <option value="100001-500000">100000 - 500000</option>
    <option value="500001-1000000">500000 - 1000000</option>
    <option value="1000001-1500000">1000000 - 1500000</option>
    <option value="1500001-2000000">1500000 - 2000000</option>
    <option value="2000001-2500000">2000000 - 2500000</option>
    <option value="3000000-999999999">Más de 3000000</option>
    <!-- Agrega más opciones según sea necesario -->
</select>
<button id="aplicarPrecioFiltro">Filtrar por precio</button>

<input type="text" id="nombreFiltro" placeholder="Ingrese el nombre a filtrar">
<button id="aplicarNombreFiltro">Filtrar por nombre</button>

<br>
<button id="restablecerFiltro" style="margin-top: 10px;">Restablecer busqueda</button>


        <h1 class="h1"> Novedades Hardware y Pc</h1>
        <div class="contenedorComponentes">
            <button class="crearButton" id="crearButton"><a href="/crearcomponentes">crear</a></button>
        </div>
        {{#each querycomponentes}} 
        <div class="animacion-componente componente-contenedor componente-oculto">
        <div class="confeimg">
        <p style="display: none;">{{id_componenetes}}</p>  
        <img src="{{imagen}}">
        <h1 class="tipoinicio" > {{tipo}} </h1>
        <h4 class="nombreinicio"> {{nombre}} </h4>
        <h4 class="fabricanteinicio"> {{fabricante}} </h4>
        <h4 class="precio"> {{formatCurrency precio}} </h4>
        <h4 class="descripcioninicio"> {{descripcion}} </h4>
        <p> 
            <a href="/verdetallescomponente/{{id_componenetes}}" class="verdetalles">
                ver mas detalles
            </a>
        </p>
        </div>
        
        


        <div class="contenedorComponentes">
            
            <button class="editarButton" id="editarButton"><a href="/editarcomponentes/{{id_componenetes}}"><i class="fas fa-edit"></i></a></button>
            <button class="eliminarButton" id="eliminarButton" onclick="validarEliminar('{{id_componenetes}}')"><i class="iconof fas fa-trash-alt" style="color: white;"></i></button>
            

        </div>
        </div>

        {{/each}}
        {{#if alerta}}
  <div class="alert alert-warning" role="alert">
    {{alerta}}
  </div>
{{/if}}
        
            
 <script>
    //-------------------------------------- Función para confirmar si un usuario desea eliminar un registro

    function validarEliminar(id_componentes) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: 'Se eliminará el componente seleccionado, ¿deseas continuar?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                axios.post('/eliminarcomponentes', {
                    id_componentes: id_componentes
                }).then(function (response) {
                    Swal.fire({
                        title: '¡Eliminado!',
                        text: response.data.mensaje,
                        icon: 'success'
                    }).then(() => {
                        window.location.href = '/componentes';
                    });
                }).catch(function (response) {
                    Swal.fire({
                        title: 'Error',
                        text: response.data.mensaje,
                        icon: 'error'
                    }).then(() => {
                        window.location.href = '/componentes';
                    });
                });
            }
        });
    }
//----------------------------------------------------------------animacion para cada vez que bajemos el componente se vea de izquierda a derecha

document.addEventListener("DOMContentLoaded", function() {
    const componenteContenedores = document.querySelectorAll(".componente-contenedor");
    
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("componente-oculto");
                entry.target.classList.add("componente-visible");
                observer.unobserve(entry.target);
            }
        });
    });

    componenteContenedores.forEach(curso => {
        observer.observe(curso);
    });
});
//----------------------------------------------------------------circulo segun el precio

document.addEventListener("DOMContentLoaded", function() {
    const precioElements = document.querySelectorAll(".precio");

    precioElements.forEach(precioElement => {
        const precioText = precioElement.textContent.trim();
        const precio = parseInt(precioText.replace(/\D/g, '')); // Elimina los caracteres no numéricos

        if (precio >= 0 && precio <= 300000) {
            precioElement.classList.add("verde");
        } else if (precio >= 300001 && precio <= 2000000) {
            precioElement.classList.add("amarillo");
        } else {
            precioElement.classList.add("rojo");
        }
    });
});



//----------------------------------------------------------------filtrar por nombre
document.addEventListener("DOMContentLoaded", function(){
    const componentes = document.querySelectorAll(".componente-contenedor");
    const nombreFiltro = document.getElementById("nombreFiltro")
    const botonaplicarNombreFiltro = document.getElementById("aplicarNombreFiltro")


    botonaplicarNombreFiltro.addEventListener("click", function(){
        const nombreFiltroValor = nombreFiltro.value.toLowerCase().trim();
        const letras = nombreFiltroValor.split('').join('.*'); // Crear patrón de búsqueda
        const regex = new RegExp(letras, "i"); // Expresión regular para buscar el patrón

        componentes.forEach(componente => {
        const nombreComponente = componente.querySelector('.nombreinicio').textContent.toLowerCase();
        const botonesEditar = componente.querySelectorAll('.editarButton');
        const botonesEliminar = componente.querySelectorAll('.eliminarButton');
        const botonescomentariosCOM = componente.querySelectorAll('.comentariosCOM');
        if(nombreFiltroValor === '' || regex.test(nombreComponente)){
            componente.style.display = "block";
            botonesEditar.forEach(boton => boton.style.display = "block");
            botonesEliminar.forEach(boton => boton.style.display = "block");
            botonescomentariosCOM.forEach(boton => boton.style.display = "block");
        }else {
            componente.style.display = "none";
            botonesEditar.forEach(boton => boton.style.display = "none");
            botonesEliminar.forEach(boton => boton.style.display = "none");
            botonescomentariosCOM.forEach(boton => boton.style.display = "none");
        }
    })
    })
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("componente-oculto");
                entry.target.classList.add("componente-visible");
                observer.unobserve(entry.target);
            }
        });
    });

    componentes.forEach(componente => {
        observer.observe(componente);
    });
    
})

//----------------------------------------------------------------filtrar por tipo


document.addEventListener("DOMContentLoaded", function() {
    const componentes = document.querySelectorAll(".componente-contenedor");

    const tipoFiltro = document.getElementById("tipoFiltro");
    const botonAplicarFiltro = document.getElementById("aplicarFiltro");

    botonAplicarFiltro.addEventListener("click", function() {
        const tipoFiltroValor = tipoFiltro.value.toLowerCase().trim();
        const letras = tipoFiltroValor.split('').join('.*'); // Crear patrón de búsqueda
        const regex = new RegExp(letras, "i"); // Expresión regular para buscar el patrón

        componentes.forEach(componente => {
            const tipoComponente = componente.querySelector(".tipoinicio").textContent.toLowerCase();
            const botonesEditar = componente.querySelectorAll('.editarButton');
            const botonesEliminar = componente.querySelectorAll('.eliminarButton');
            const botonescomentariosCOM = componente.querySelectorAll('.comentariosCOM');

            if (tipoFiltroValor === "" || regex.test(tipoComponente)){
                componente.style.display = "block";
                botonesEditar.forEach(boton => boton.style.display = "block");
                botonesEliminar.forEach(boton => boton.style.display = "block");
                botonescomentariosCOM.forEach(boton => boton.style.display = "block");
            } else {
                componente.style.display = "none";
                botonesEditar.forEach(boton => boton.style.display = "none");
                botonesEliminar.forEach(boton => boton.style.display = "none");
                botonescomentariosCOM.forEach(boton => boton.style.display = "none");
            }
        });
    });

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("componente-oculto");
                entry.target.classList.add("componente-visible");
                observer.unobserve(entry.target);
            }
        });
    });

    componentes.forEach(componente => {
        observer.observe(componente);
    });
});  
//----------------------------------------------------------------filtrar por precio y restablecer filtro

document.addEventListener("DOMContentLoaded", function() {
    const componentes = document.querySelectorAll(".componente-contenedor");
    const precioFiltro = document.getElementById("precioFiltro");
    const botonAplicarPrecioFiltro = document.getElementById("aplicarPrecioFiltro");
    const botonRestablecerFiltro = document.getElementById("restablecerFiltro");


    botonAplicarPrecioFiltro.addEventListener("click", function() {
        const precioFiltroValor = precioFiltro.value;

        componentes.forEach(componente => {
            const precioElement = componente.querySelector(".precio");
            const precioComponente = parseInt(precioElement.textContent.replace(/\D/g, ''));

            const rango = precioFiltroValor.split("-");
            const rangoMinimo = parseInt(rango[0]);
            const rangoMaximo = rango[1] === "+" ? Infinity : parseInt(rango[1]);

            if (precioComponente >= rangoMinimo && precioComponente <= rangoMaximo) {
                componente.style.display = "block";
            } else {
                componente.style.display = "none";
            }
        });
    });
    botonRestablecerFiltro.addEventListener("click", function() {
        precioFiltro.value = ""; // Limpiar el campo de filtro
        /*location.reload(); // Recargar la página*/
        componentes.forEach(componente => {
            componente.style.display = "block"; // Mostrar todos los componentes
        });
    });
});
</script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.js"></script>
    
</body>