<style>




.titulo{
    color: 	#ebf2f6;
    text-align: center;
}
.divbar{
    overflow: hidden;
    text-align: center;
}

img{
    float: left;
    margin-left: 300px;
    margin-top: 30px;
    border-radius: 100%;
    -webkit-border-radius: 70%;
    -moz-border-radius: 70%;
    -ms-border-radius: 70%;
    -o-border-radius: 70%;
    height: 200px;
    object-fit: cover;
    /*Ajustalaimagenparallenarelespaciosindistorsión*/
}



.h1{
    color: 	#ebf2f6;
}
h1{
    color: rgb(70, 70, 238);
}
.objetos{
    color: rgb(70, 70, 238) ;
}
.confeimg{
    border: 3px transparent solid;
    margin-top: 5px;
        text-align: center;

}
/* Estilos CSS personalizados para el h4 */
.custom-h4 {
    border: 1px solid #dc3545; /* Color del borde */
    background-color: transparent; /* Fondo transparente */
    color: #dc3545; /* Color del texto */
    padding: 0.25rem 0.5rem; /* Espaciado interno */
    border-radius: 50%; /* Borde redondeado */
    text-align: center; /* Alineación del texto */
    cursor: pointer; /* Cursor de apuntador */
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out; /* Transiciones suaves */
    display: inline-block; /* Mostrar como bloque en línea */
    margin: 0; /* Eliminar márgenes por defecto */
}

.custom-h4:hover {
    background-color: #dc3545; /* Color de fondo al pasar el mouse */
    color: #ebf2f6; /* Color del texto al pasar el mouse */
}

.confeimg{
    margin-top: 150px;
}
.tipoinicio{
    color: #2a6e9e ;
}
.nombreinicio{
    color: rgb(70, 70, 238) ;
}
.fabricanteinicio{
    color: rgb(70, 70, 238) ;
}
.descripcioninicio{
    color: #ebf2f6 ;
}
.verdetalles{
    color: #144c7a ;
    text-decoration: underline !important;
}
a{
    text-decoration: none;
    color: #ebf2f6;
}
.crearButton{
    background-color: black;

}

.editarButton{
    background-color: black;
    color: #ebf2f6;

}

.editarButton:hover{
background-color: blue
}
.eliminarButton{
    background-color: black;
    color: #ebf2f6;

}
.eliminarButton:hover{
    background-color: red !important;
}
.contenedorComponentes{
      display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes slideInFromLeft {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(0);
    }
}


.animacion-componente.componente-visible {
    animation: slideInFromLeft 0.5s ease-out;
}

</style>
<body>

<input type="text" id="tipoFiltro" placeholder="Escribe el tipo a buscar">
<button id="aplicarFiltro">Aplicar filtro</button>

        <h1 class="h1"> Novedades Hardware y Pc</h1>
        <div class="contenedorComponentes">
            <button class="crearButton" id="crearButton"><a href="/crearcomponentes">crear</a></button>
        </div>
        {{#each querycomponentes}} 
        <div class="animacion-componente componente-contenedor componente-oculto">
        <div class="confeimg">
        <p style="display: none;">{{id_componenetes}}</p>  
        <img src="{{imagen}}">
        <h1 class="tipoinicio"> {{tipo}} </h1>
        <h4 class="nombreinicio"> {{nombre}} </h4>
        <h4 class="fabricanteinicio"> {{fabricante}} </h4>
        <h4 class="precioinicio custom-h4 waves-effect"> {{formatCurrency precio}} </h4>
        <h4 class="descripcioninicio"> {{descripcion}} </h4>
        <p> 
            <a href="/verdetallescomponente/{{id_componenetes}}" class="verdetalles">
                ver mas detalles
            </a>
        </p>
        </div>
        
        


        <div class="contenedorComponentes">
            
            <button class="editarButton" id="editarButton"><a href="/editarcomponentes/{{id_componenetes}}"><i class="fas fa-edit"></i></a></button>
            <button class="eliminarButton" id="eliminarButton" onclick="validarEliminar('{{id_componenetes}}')"><i class="iconof fas fa-trash-alt" style="color: white;"></i></button>

        </div>
        </div>

        {{/each}}
        

 <script>
    // Función para confirmar si un usuario desea eliminar un registro
    function validarEliminar(id_componentes) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: 'Se eliminará el componente seleccionado, ¿deseas continuar?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                axios.post('/eliminarcomponentes', {
                    id_componentes: id_componentes
                }).then(function (response) {
                    Swal.fire({
                        title: '¡Eliminado!',
                        text: response.data.mensaje,
                        icon: 'success'
                    }).then(() => {
                        window.location.href = '/componentes';
                    });
                }).catch(function (response) {
                    Swal.fire({
                        title: 'Error',
                        text: response.data.mensaje,
                        icon: 'error'
                    }).then(() => {
                        window.location.href = '/componentes';
                    });
                });
            }
        });
    }
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const componenteContenedores = document.querySelectorAll(".componente-contenedor");
    
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("componente-oculto");
                entry.target.classList.add("componente-visible");
                observer.unobserve(entry.target);
            }
        });
    });

    componenteContenedores.forEach(curso => {
        observer.observe(curso);
    });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const componentes = document.querySelectorAll(".componente-contenedor");

    const tipoFiltro = document.getElementById("tipoFiltro");
    const botonAplicarFiltro = document.getElementById("aplicarFiltro");

    botonAplicarFiltro.addEventListener("click", function() {
        const tipoFiltroValor = tipoFiltro.value.toLowerCase().trim();

        componentes.forEach(componente => {
            const tipoComponente = componente.querySelector(".tipoinicio").textContent.toLowerCase();
            const botonesEditar = componente.querySelectorAll('.editarButton');
            const botonesEliminar = componente.querySelectorAll('.eliminarButton');

            if (tipoFiltroValor === "" || tipoComponente.includes(tipoFiltroValor)) {
                componente.style.display = "block";
                botonesEditar.forEach(boton => boton.style.display = "block");
                botonesEliminar.forEach(boton => boton.style.display = "block");
            } else {
                componente.style.display = "none";
                botonesEditar.forEach(boton => boton.style.display = "none");
                botonesEliminar.forEach(boton => boton.style.display = "none");
            }
        });
    });

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("componente-oculto");
                entry.target.classList.add("componente-visible");
                observer.unobserve(entry.target);
            }
        });
    });

    componentes.forEach(componente => {
        observer.observe(componente);
    });
});
</script>



<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.js"></script>
    
</body>