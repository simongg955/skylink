<style>

    img {
        float: left;
        margin-left: 200px;
        margin-top: 30px;
        border-radius: 100%;
        -webkit-border-radius: 70%;
        -moz-border-radius: 70%;
        -ms-border-radius: 70%;
        -o-border-radius: 70%;
        height: 200px;
        object-fit: cover;
        /*Ajustalaimagenparallenarelespaciosindistorsión*/
    }

    p {
        color: #ebf2f6;
        margin-top: 75px;
    }

    h1 {
        color: rgb(70, 70, 238);
    }

    .objetos {
        color: rgb(70, 70, 238);
        margin-top: 30px;
    }

    .confeimg {
        margin-top: 150px;
    }

    .descripcioninicio {
        color: #ebf2f6;
    }

    .titulonoticia {
        color: rgb(70, 70, 238);
    }

    .verdetalles {
        color: #144c7a;
        text-decoration: underline !important;
    }

    a {
        text-decoration: none !important;
        color: #ebf2f6;
    }

    .crearButton {
        background-color: black;
        color: #ebf2f6;
    }

    .editarButton {
        background-color: black;
        color: #ebf2f6;

    }

    .editarButton:hover {
        background-color: blue
    }

    .eliminarButton {
        background-color: black;
        color: #ebf2f6;

    }

    .eliminarButton:hover {
        background-color: red !important;
    }
    

    .contenedorNoticias {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    @keyframes slideInFromLeft {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(0);
        }
    }


    .animacion-noticia.noticia-visible {
        animation: slideInFromLeft 0.5s ease-out;
    }
    #aplicarFiltro:hover{
        cursor: pointer;
    }
    #restablecerFiltro:hover{
        cursor: pointer;
    }
</style>

<body>



    <input type="text" id="tituloFiltro" placeholder="Escribe el titulo a buscar">
    <button id="aplicarFiltro" >Aplicar filtro</button>
    <br>
    <button id="restablecerFiltro" style="margin-top: 10px;">Restablecer busqueda</button>

    <div class="objetos">
        <div class="contenedorNoticias">
            <button class="crearButton" id="crearButton"><a href="/crearnoticias">crear</a></button>
        </div>
        {{#each querynoticias}}
        <div class="animacion-noticia noticia-contenedor noticia-oculto">
            <div class="confeimg">
                <p style="display: none;">{{id_noticias}}</p>
                <img src="{{imagen}}">
                <h1 class="titulonoticia"> {{titulo}} </h1>
                <h4 class="descripcioninicio"> {{descripcion}} </h4>

                <p>
                    <a href="/verdetallesnoticias/{{id_noticias}}" class="verdetalles">
                        ver mas detalles
                    </a>
                </p>
            </div>


            <div class="contenedorNoticias">

                <button class="editarButton" id="editarButton"><a href="/editarnoticias/{{id_noticias}}
"><i class="fas fa-edit"></i></a></button>
                <button class="eliminarButton" id="eliminarButton" onclick="validarEliminar('{{id_noticias}}')"><i
                        class="iconof fas fa-trash-alt" style="color: white;"></i></button>
                

            </div>
        </div>
    </div>

    {{/each}}


    <script>
        // Función para confirmar si un usuario desea eliminar una noticia
        function validarEliminar(id_noticias) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: 'Se eliminará la noticia seleccionada, ¿deseas continuar?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    axios.post('/eliminarnoticias', {
                        id_noticias: id_noticias
                    }).then(function (response) { 
                        Swal.fire({
                            title: '¡Eliminada!',
                            text: response.data.mensaje,
                            icon: 'success'
                        }).then(() => {
                            window.location.href = '/noticias';
                        });
                    }).catch(function (response) {
                        Swal.fire({
                            title: 'Error',
                            text: response.data.mensaje,
                            icon: 'error'
                        }).then(() => {
                            window.location.href = '/noticias';
                        });
                    });
                }
            });
        }

//noticias visible y no visible -------------------------------
        document.addEventListener("DOMContentLoaded", function () {
            const noticiasContenedores = document.querySelectorAll(".noticia-contenedor");

            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove("noticia-oculto");
                        entry.target.classList.add("noticia-visible");
                        observer.unobserve(entry.target);
                    }
                });
            });

            noticiasContenedores.forEach(curso => {
                observer.observe(curso);
            });
        });


//filtrar ---------------------------------------------------


        document.addEventListener("DOMContentLoaded", function () {
            const noticiaContenedores = document.querySelectorAll(".noticia-contenedor");
            const tituloFiltro = document.getElementById("tituloFiltro");
            const botonAplicarFiltro = document.getElementById("aplicarFiltro");
            const botonRestablecerFiltro = document.getElementById("restablecerFiltro");

            const filtroTituloGuardado = localStorage.getItem("filtroTitulo");
            const urlParams = new URLSearchParams(window.location.search);
            const filtroURL = urlParams.get("filtro");

            // Establecer el valor del filtro (de localStorage o de la URL)
            const filtroActual = filtroURL || filtroTituloGuardado || "";
            tituloFiltro.value = filtroActual;

            // Activar el evento de filtrado automáticamente
            if (filtroActual && !localStorage.getItem("filtroTitulo")) {
                botonAplicarFiltro.click();
                
            }

            botonAplicarFiltro.addEventListener("click", aplicarFiltro);

            function aplicarFiltro() {
                const tituloFiltroValor = tituloFiltro.value.toLowerCase().trim();
                const letrasFiltro = [...new Set(tituloFiltroValor.split(''))]; // Obtener letras del filtro

                noticiaContenedores.forEach(noticia => {
                    const titulonoticia = noticia.querySelector(".titulonoticia").textContent.toLowerCase();
                    const botonesContenedor = noticia.querySelector(".contenedorNoticias");
                    const todasLetrasPresentes = letrasFiltro.every(letra => titulonoticia.includes(letra));

                    if (tituloFiltroValor === "" || todasLetrasPresentes) {
                        noticia.style.display = "block";
                        botonesContenedor.style.display = "flex";
                    } else {
                        noticia.style.display = "none";
                        botonesContenedor.style.display = "none";
                    }
                });

                // Actualizar la URL para reflejar el filtro actual
                const url = new URL(window.location);
                url.searchParams.set("filtro", tituloFiltroValor);
                window.history.replaceState(null, null, url);

                // Guardar el valor del filtro en localStorage
                localStorage.setItem("filtroTitulo", tituloFiltroValor);
            }

            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove("noticia-oculto");
                        entry.target.classList.add("noticia-visible");
                        observer.unobserve(entry.target);
                    }
                });
            });

            noticiaContenedores.forEach(noticia => {
                observer.observe(noticia);
            });

            botonRestablecerFiltro.addEventListener("click", function () {
                tituloFiltro.value = ""; // Limpiar el campo de filtro

                noticiaContenedores.forEach(noticia => {
                    noticia.style.display = "block"; // Mostrar todos los cursos
                    const botonesContenedor = noticia.querySelector(".contenedorNoticias");
                    botonesContenedor.style.display = "flex"; // Mostrar los botones de edición/eliminación
                });

                // Eliminar el parámetro "filtro" de la URL
                const url = new URL(window.location);
                url.searchParams.delete("filtro");
                window.history.replaceState(null, null, url);

                // Limpiar el filtro en localStorage
                localStorage.removeItem("filtroTitulo");
            });
            botonRestablecerFiltro.addEventListener("click", function () {
                tituloFiltro.value = ""; // Limpiar el campo de filtro
                location.reload();

                noticiaContenedores.forEach(noticia => {
                    noticia.style.display = "block"; // Mostrar todas las noticias
                    const botonesContenedor = noticia.querySelector(".contenedorNoticias");
                    botonesContenedor.style.display = "flex"; // Mostrar los botones de edición/eliminación
                });

                // Eliminar el parámetro "filtro" de la URL
                const url = new URL(window.location);
                url.searchParams.delete("filtro");
                window.history.replaceState(null, null, url);

                // Limpiar el filtro en localStorage
                localStorage.removeItem("filtroTitulo");
            });
        });
    </script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.js"></script>


    
</body>

{{!-- document.addEventListener("DOMContentLoaded", function() {
const noticiaContenedores = document.querySelectorAll(".noticia-contenedor");
const tituloFiltro = document.getElementById("tituloFiltro");
const botonAplicarFiltro = document.getElementById("aplicarFiltro");
const botonRestablecerFiltro = document.getElementById("restablecerFiltro");

const filtroTituloGuardado = localStorage.getItem("filtroTitulo");
const urlParams = new URLSearchParams(window.location.search);
const filtroURL = urlParams.get("filtro");

// Establecer el valor del filtro (de localStorage o de la URL)
const filtroActual = filtroURL || filtroTituloGuardado || "";
tituloFiltro.value = filtroActual;

// Activar el evento de filtrado automáticamente
if (filtroActual) {
botonAplicarFiltro.click();
}

botonAplicarFiltro.addEventListener("click", aplicarFiltro);

function aplicarFiltro() {
const tituloFiltroValor = tituloFiltro.value.toLowerCase().trim();
const letrasFiltro = [...new Set(tituloFiltroValor.split(''))]; // Obtener letras del filtro

noticiaContenedores.forEach(noticia => {
const titulonoticia = noticia.querySelector(".titulonoticia").textContent.toLowerCase();
const botonesContenedor = noticia.querySelector(".contenedorNoticias");
const todasLetrasPresentes = letrasFiltro.every(letra => titulonoticia.includes(letra));

if (tituloFiltroValor === "" || todasLetrasPresentes) {
noticia.style.display = "block";
botonesContenedor.style.display = "flex";
} else {
noticia.style.display = "none";
botonesContenedor.style.display = "none";
}
});

// Actualizar la URL para reflejar el filtro actual
const url = new URL(window.location);
url.searchParams.set("filtro", tituloFiltroValor);
window.history.replaceState(null, null, url);

// Guardar el valor del filtro en localStorage
localStorage.setItem("filtroTitulo", tituloFiltroValor);
}

const observer = new IntersectionObserver(entries => {
entries.forEach(entry => {
if (entry.isIntersecting) {
entry.target.classList.remove("noticia-oculto");
entry.target.classList.add("noticia-visible");
observer.unobserve(entry.target);
}
});
});

noticiaContenedores.forEach(noticia => {
observer.observe(noticia);
});

botonRestablecerFiltro.addEventListener("click", function() {
tituloFiltro.value = ""; // Limpiar el campo de filtro
location.reload();

noticiaContenedores.forEach(noticia => {
noticia.style.display = "block"; // Mostrar todas las noticias
const botonesContenedor = noticia.querySelector(".contenedorNoticias");
botonesContenedor.style.display = "flex"; // Mostrar los botones de edición/eliminación
});

// Eliminar el parámetro "filtro" de la URL
const url = new URL(window.location);
url.searchParams.delete("filtro");
window.history.replaceState(null, null, url);

// Limpiar el filtro en localStorage
localStorage.removeItem("filtroTitulo");
});
}); --}}